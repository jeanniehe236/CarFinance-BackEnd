package carfinance.server.responseGenerator;

import java.util.Map;

import carfinance.server.offerGenerator.Offer;
import carfinance.server.offerGenerator.OfferGenerator;
import carfinance.server.preprocessor.AnswerSheet;
import carfinance.server.preprocessor.Parser;
import carfinance.server.preprocessor.Validator;


public class ResponseGenerator {
	
	/***
	 * Given a dictionary mapping the field names in a form to the corresponding user inputs, a response is generated with the help of
	 * an parser, a validator and an offer generator.
	 * @param userInputs: a map mapping the fields names to the corresponding user inputs
	 * @param validator: a validator to validate the user inputs and throw away the answer sheet generated by the parser in case the inputs are invalid.
	 * @param offerGenerator: an offer generator to generate a list of offers to be put into a response object.
	 * @return a response object, with or without offers depending on whether the inputs are valid and whether there are products available for the user.
	 */
	public static Response generateResponse(Map<String, String> userInputs, Validator validator, OfferGenerator offerGenerator) {
		
		// Step 1: Get an answer sheet generated by the parser,  validated by the validator.
		AnswerSheet answersheet = validator.getValidatedAnswerSheet(new Parser().parse(userInputs));
		
		// Step 2: Check if an valid answer sheet has been returned by the validator. 
		// If no: generate and return a response telling the user that his or her answers are invalid.
		// If yes: get a list of offers from the offer generator.
		if (answersheet == null) {
		
			return new Response(answersheet, "The answers you have provided seems invalid. Please note that only integers and the given choices are allowed and that the loan after down payment must be above 0 kr.");
		
		} else {
			
			Offer[] offers = offerGenerator.getOffers(answersheet); // get a list of offers from the offer generator.
			
			// If the answer sheet is valid but no offers are generated, create a response with a message telling the 
			// user that no offers are produced and ask the user to contact the bank.
			if (offers.length == 0) return new Response(answersheet, "Sorry, but there is no offer available for you. Please contact the bank for more details.");
			
			
			// Generate a response, put the offers provided by the offer generator in the response and return it to the caller.
			return new ResponseWithOffer(answersheet, offers);
		}
	}
	
}
	
	
